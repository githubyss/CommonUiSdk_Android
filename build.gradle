def isShellApp = project.getName() == rootProject.shellApp
def isLaunchApp = project.getName() == rootProject.launchApp

println "isShellApp: ${isShellApp}"
println "isLaunchApp: ${isLaunchApp}"

if (isLaunchApp) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    buildToolsVersion build_tools_version
    compileSdkVersion compile_sdk_version.toInteger()

    resourcePrefix 'comui_'

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        consumerProguardFiles 'consumer-rules.pro'
    }

    Properties properties = new Properties()
    File propertyFile = new File("${rootDir.getAbsolutePath()}/signing.properties")
    InputStream inputStream = propertyFile.newDataInputStream()
    properties.load(inputStream)
    def RELEASE_STORE_FILE = file("${rootDir.getAbsolutePath()}/${properties.getProperty('RELEASE_STORE_FILE')}")
    def RELEASE_STORE_PASSWORD = properties.getProperty('RELEASE_STORE_PASSWORD')
    def RELEASE_KEY_ALIAS = properties.getProperty('RELEASE_KEY_ALIAS')
    def RELEASE_KEY_PWD = properties.getProperty('RELEASE_KEY_PWD')

    signingConfigs {
        release {
            storeFile RELEASE_STORE_FILE
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PWD
        }
    }

    buildTypes {
        debug {
            debuggable isDebuggable.toBoolean()
            minifyEnabled isMinifyEnabled.toBoolean()
            if (isLaunchApp) {
                shrinkResources isMinifyEnabled.toBoolean()
            }
            zipAlignEnabled isZipAlignEnabled.toBoolean()

            signingConfig signingConfigs.debug

            buildConfigField "boolean", "MOCK_LOCAL", "false"
        }

        release {
            debuggable false
            minifyEnabled true
            if (isLaunchApp) {
                shrinkResources true
            }
            zipAlignEnabled true

            if (RELEASE_STORE_FILE.exists()) {
                signingConfig signingConfigs.release
            }

            buildConfigField "boolean", "MOCK_LOCAL", "false"
        }
    }

    flavorDimensions 'library'
    productFlavors {
        app {
            dimension 'library'
            if (isLaunchApp) {
                applicationId 'com.githubyss.mobile.common.ui'
            }
            versionCode 1
            versionName "1.0"
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'src/main/java'
                srcDirs 'src/main/kotlin'
            }
            res {
                srcDirs 'src/main/res'
                srcDirs 'src/main/res/common'

                srcDirs 'src/main/res/banner'
                srcDirs 'src/main/res/button'
                srcDirs 'src/main/res/card'
                srcDirs 'src/main/res/check_box'
                srcDirs 'src/main/res/dialog'
                srcDirs 'src/main/res/input'
                srcDirs 'src/main/res/label'
                srcDirs 'src/main/res/launcher'
                srcDirs 'src/main/res/separator'
                srcDirs 'src/main/res/tag'
                srcDirs 'src/main/res/tip'
                srcDirs 'src/main/res/toolbar'
                srcDirs 'src/main/res/time_countdown'

                srcDirs 'src/main/res/auto_hide_floating_window'
                srcDirs 'src/main/res/floating_audio_player'
                srcDirs 'src/main/res/floating_icon'

                srcDirs 'src/main/res/recycler_view'
                srcDirs 'src/main/res/slide_to_refresh_scroll_view'
            }
            manifest {
                srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs {
                srcDirs 'libs'
            }
        }

        if (isLaunchApp) {
            app {
                java {
                    srcDirs 'src/app/java'
                    srcDirs 'src/app/kotlin'
                }
                res {
                    srcDirs 'src/app/res'
                    srcDirs 'src/app/res/common'

                    srcDirs 'src/app/res/homepage'
                    srcDirs 'src/app/res/mvvm'
                    srcDirs 'src/app/res/view_binding'
                    srcDirs 'src/app/res/view_binding/inline'
                    srcDirs 'src/app/res/view_binding/reflect'
                    srcDirs 'src/app/res/animate'
                    srcDirs 'src/app/res/recycler_view'
                    srcDirs 'src/app/res/recycler_view/search'
                    srcDirs 'src/app/res/recycler_view/multi'
                    srcDirs 'src/app/res/speech_recognition'
                }
                manifest {
                    srcFile 'src/app/AndroidManifest.xml'
                }
            }
        }

        test {
            java {
                srcDirs 'src/test/java'
                srcDirs 'src/test/kotlin'
            }
        }

        // sourceSets.all {
        //     set -> println "${set.name} 的文件是 ${set.java.srcDirs}"
        // }
    }

    compileOptions {
        sourceCompatibility java_version
        targetCompatibility java_version
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/metadata.kotlin_module'
        exclude 'META-INF/metadata.jvm.kotlin_module'
    }

    dataBinding {
        enabled = isDataBindingEnabled.toBoolean()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':CommonLibSdk_Android')
    implementation project(':CommonKitSdk_Android')
    if (isLaunchApp) {
        implementation project(':CommonNetSdk_Android')
    }
}

kapt {
    arguments {
        arg('moduleName', project.getName())
    }
}
