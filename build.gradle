if (isRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion compile_sdk_version.toInteger()
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version

        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            debuggable isDebuggable.toBoolean()
            minifyEnabled isMinifyEnabled.toBoolean()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "boolean", "MOCK_LOCAL", "false"
        }

        release {
            debuggable isDebuggable.toBoolean()
            minifyEnabled isMinifyEnabled.toBoolean()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "boolean", "MOCK_LOCAL", "false"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/metadata.kotlin_module'
        exclude 'META-INF/metadata.jvm.kotlin_module'
    }

    flavorDimensions 'alone'
    productFlavors {
        if (isRunAlone.toBoolean()) {
            alone {
                applicationId 'com.githubyss.mobile.common.ui'
                dimension 'alone'
            }
        }
    }

    sourceSets {
        if (isRunAlone.toBoolean()) {
            alone {
                java {
                    srcDirs 'src/alone/java'
                    srcDirs 'src/alone/kotlin'
                }
                res {
                    srcDirs 'src/alone/res'
                    srcDirs 'src/alone/res/common'
                    srcDirs 'src/alone/res/value'

                    srcDirs 'src/alone/res/homepage'
                    srcDirs 'src/alone/res/mvvm'
                    srcDirs 'src/alone/res/view_binding'
                    srcDirs 'src/alone/res/animation'
                    srcDirs 'src/alone/res/recycler_view/search_result'
                    srcDirs 'src/alone/res/recycler_view/multi'
                }
                manifest { srcFile 'src/alone/AndroidManifest.xml' }
            }
        }

        main {
            java {
                srcDirs 'src/main/java'
                srcDirs 'src/main/kotlin'
            }
            res {
                srcDirs 'src/main/res'
                srcDirs 'src/main/res/common'
                srcDirs 'src/main/res/value'

                srcDirs 'src/main/res/banner'
                srcDirs 'src/main/res/check_box'
                srcDirs 'src/main/res/dialog'
                srcDirs 'src/main/res/recycler_view'
                srcDirs 'src/main/res/time_countdown'
                srcDirs 'src/main/res/floating_icon'
                srcDirs 'src/main/res/floating_audio_player'
                srcDirs 'src/main/res/auto_hide_floating_window'
            }
            manifest { srcFile 'src/main/AndroidManifest.xml' }
            jniLibs { srcDirs 'libs' }
        }
    }

    dataBinding {
        enabled = isDataBindingEnabled.toBoolean()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':CommonLibSdk_Android')
    implementation project(':CommonResSdk_Android')
    implementation project(':CommonKitSdk_Android')
    implementation project(':CommonNetworkSdk_Android')
    if (!isRunAlone.toBoolean()) {
    }
}

kapt {
    arguments {
        arg('moduleName', project.getName())
    }
}
